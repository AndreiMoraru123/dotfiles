" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

" No noise
set visualbell

" Smart Join
set ideajoin

" Sneak motion
set sneak

" Unique letter highlighting
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Thick cursor
set guicursor=i:block

" Show mode
set showmode

" Don't use Ex mode, use Q for formatting.
map Q gq

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'

" Commentary plugin
Plug 'tpope/vim-commentary'

" Vim-like file tree navigation
Plug 'preservim/nerdtree'

" Operate on indented block lines
Plug 'michaeljsmith/vim-indent-object'

ideavimsupport+=singleline
set ideavimsupport=

let mapleader = " "

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
map \b <Action>(ToggleLineBreakpoint)

"" Map <leader>e to show error hovering around the cursor
nmap <leader>e <Action>(ShowErrorDescription)

"" Map <leader>ne to go to next error
nmap <leader>ne <Action>(GotoNextError)

"" Run python console with the file's locals
map <leader>py <Action>(PyRunFileInConsole)

"" New python file (opens in user folder)
map <leader>pf <Action>(NewPythonFile)

"" Expand python type annotations (only if collapsed)
map <leader>xp <Action>(ExpandPythonTypeAnnotations)

"" Collapse python type annotations
map <leader>cl <Action>(CollapsePythonTypeAnnotations)

"" Stop execution
map <leader>q <Action>(Stop)

" Move lines up/down with SHIFT + K/J
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"" Send current selection to null register so that pasting keeps the previous one in buffer
vnoremap <leader>p "_dP

"" Send yank to system clipboard
vnoremap <leader>y "+y

"" Send yank to system clipboard, but in normal mode, to allow extras (like selecting a whole paragraph)
nnoremap <leader>y "+y

"" Copy the whole file
nnoremap <leader>Y gg"+yG

"" Uppercase the whole word
nnoremap <Leader>u viwU

"" Lowercase the whole word
nnoremap <Leader>l viwu

"" Accept autocomplete suggestion
imap <C-y> <Action>(EditorChooseLookupItem)

" Go to symbol
nmap gO <Action>(GotoSymbol)

" Set Harpoon targets
nmap <Leader>1 :action SetHarpoon1<CR>
nmap <Leader>2 :action SetHarpoon2<CR>
nmap <Leader>3 :action SetHarpoon3<CR>
nmap <Leader>4 :action SetHarpoon4<CR>
nmap <Leader>5 :action SetHarpoon5<CR>

" Go to Harpoon targets
nmap 1 :action GotoHarpoon1<CR>
nmap 2 :action GotoHarpoon2<CR>
nmap 3 :action GotoHarpoon3<CR>
nmap 4 :action GotoHarpoon4<CR>
nmap 5 :action GotoHarpoon5<CR>

" Show Harpoon UI
nmap <C-e> :action ShowHarpoon<CR>

" Add current file to Harpoon
nmap <leader>a :action AddToHarpoon<CR>
